@inject IHttpContextAccessor _httpContextAccessor
@using RebelCmsTemplate.Models.Menu
@using RebelCmsTemplate.Repository.Menu
@using RebelCmsTemplate.Util
@using RebelCmsTemplate.Enum;
@using Microsoft.AspNetCore.Http
@{
    SharedUtil sharedUtils = new(_httpContextAccessor);
    List<LeafModel> leafModels = new();
    List<FolderModel> folderModels = new();
    try
    {
        FolderRepository folderRepository = new(_httpContextAccessor);
        folderModels = folderRepository.Read();
        LeafRepository leafRepository = new(_httpContextAccessor);
        leafModels = leafRepository.Read();
    }
    catch (Exception ex)
    {
        sharedUtils.SetSystemException(ex);
    }
    var fileInfo = ViewContext.ExecutingFilePath?.Split("/");
    var filename = fileInfo != null ? fileInfo[4] : "";
    var name = filename.Split(".")[0];
    var navigationModel = sharedUtils.GetNavigation(name);
}


<div class="page-title">
    <div class="row">
        <div class="col-12 col-md-6 order-md-1 order-last">
            <h3>@navigationModel.LeafName</h3>
        </div>
        <div class="col-12 col-md-6 order-md-2 order-first">
            <nav aria-label="breadcrumb" class="breadcrumb-header float-start float-lg-end">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="#">
                            <i class="@navigationModel.FolderIcon"></i> @navigationModel.FolderName
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="@navigationModel.LeafIcon"></i> @navigationModel.LeafName
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">
                        <i class="fas fa-sign-out-alt"></i>
                        <a href="/logout">Logout</a>
                    </li>
                </ol>
            </nav>
        </div>
    </div>
</div>
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12">
                <form class="form-horizontal">
                    <div class="card card-primary">
                        <div class="card-header">Filter</div>
                        <div class="card-body">

                            <div class="form-group">
                                <div class="col-md-2">
                                    <label for="search">Search</label>
                                </div>
                                <div class="col-md-10">
                                    <input name="search" id="search" class="form-control"
                                        placeholder="Please Enter Name  Or Other Here" maxlength="64"
                                        style="width: 350px!important;" />
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <button type="button" class="btn btn-info" onclick="searchRecord()">
                                <i class="fas fa-filter"></i> Filter
                            </button>
                            &nbsp;
                            <button type="button" class="btn btn-warning" onclick="resetRecord()">
                                <i class="fas fa-power-off"></i> Reset
                            </button>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-md-12">&nbsp;</div>
                    </div>
                </form>
                <div class="card">
                    <table class="table table-bordered table-striped table-condensed table-hover" id="tableData">
                        <thead>
                            <tr>
                                <td>
                                    <label>
                                        <input type="number" name="leafSeq" id="leafSeq" class="form-control"
                                            maxlength="4" />
                                    </label>
                                </td>
                                <td>
                                    <label>
                                        <select class="form-control " name="folderKey" id="folderKey">
                                            <option value="">Please Choose</option>
                                            @foreach (var rowFolder in folderModels)
                                            {
                                                <option value="@rowFolder.FolderKey">@rowFolder.FolderName</option>
                                            }
                                        </select>
                                    </label>
                                </td>
                                <td>
                                    <label>
                                        <input type="text" name="leafName[]" id="leafName" class="form-control" />
                                    </label>
                                </td>
                                <td>
                                    <label>
                                        <input type="text" name="leafFilename[]" id="leafFilename"
                                            class="form-control" />
                                    </label>
                                </td>
                                <td>
                                    <label>
                                        <input type="text" name="leafIcon" id="leafIcon" class="form-control"
                                            maxlength="4" />
                                    </label>
                                </td>
                                <td>
                                    <Button type="button" class="btn btn-info" onclick="createRecord()">
                                        <i class="fa fa-newspaper"></i>&nbsp;CREATE
                                    </Button>
                                </td>
                                <td>&nbsp;</td>
                            </tr>
                            <tr>
                                <th scope="col">SEQ</th>
                                <th scope="col">Folder</th>
                                <th scope="col">Name</th>
                                <th scope="col">Filename</th>
                                <th scope="col">Icon</th>
                            </tr>
                        </thead>
                        <tbody id="tableBody">
                            @foreach (var row in leafModels)
                            {
                                <tr id='leaf-@row.LeafKey'>
                                    <td class="tdNormalAlign">
                                        <input type="number" title="sequence" class="form-control" name="leafSeq[]"
                                        id="leafSeq-@row.LeafKey" value="@row.LeafSeq" maxlength="4" />
                                    </td>
                                    <td class="tdNormalAlign">
                                        <select title="folder" class='form-control ' name='folderKey[]'
                                        id='folderKey-@row.LeafKey'>
                                            <option value=''>Please Choose</option>
                                            @foreach (var option in from rowFolder in folderModels
                                                                   let selected = rowFolder.FolderKey == row.FolderKey ? "selected" : ""
                                                                   select Html.Raw("<option value='" + rowFolder.FolderKey + "' " + selected
                                                                   + ">" + rowFolder.FolderName + "</option>"))
                                            {
                                                @option
                                            }
                                        </select>
                                    </td>
                                    <td class="tdNormalAlign">
                                        <input type="text" title="leaf name" class="form-control" name='leafName[]'
                                        id='leafName-@row.LeafKey' value='@row.LeafName' />
                                    </td>
                                    <td class="tdNormalAlign">
                                        <input type="text" title="filename" class="form-control" name='leafFilename[]'
                                        id='leafFilename-@row.LeafKey' value='@row.LeafFilename' />
                                    </td>
                                    <td class="tdNormalAlign">
                                        <input type="text" title="filename" class="form-control" name='leafIcon[]'
                                        id='leafIcon-@row.LeafKey' value='@row.LeafIcon' />
                                    </td>
                                    <td class="tdCodeAlign">
                                        <div class='btn-group'>
                                            <Button type="button" class="btn btn-warning"
                                            onclick='updateRecord(@row.LeafKey)'>
                                                <i class='fas fa-edit'></i>UPDATE
                                            </Button>
                                            &nbsp;
                                            <Button type="button" class="btn btn-danger"
                                            onclick='deleteRecord(@row.LeafKey)'>
                                                <i class='fas fa-trash'></i>DELETE
                                            </Button>
                                        </div>
                                    </td>
                                </tr>
                            }

                            @if (leafModels.Count == 0)
                            {
                                <tr>
                                    <td colspan="7" class="noRecord">
                                        @SharedUtil.NoRecord
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</section>
<script>
    validateMeAlphaNumeric('leafName');
    validateMeNumericRange('leafSeq');
    var folderModels = @Json.Serialize(folderModels);
    function resetRecord() {
        readRecord();
        $("#search").val("");
    }
    function emptyTemplate() {
        return "" +
            "<tr>" +
            "<td colspan=\"5\">It's lonely here</td>" +
            "</tr>";
    }
    function template(leafKey, folderKey, leafSeq, leafName, leafFilename, leafIcon) {
        let folderKeyOptions = "";
        let i = 0;
        folderModels.map((row) => {
            i++;
            const selected = (parseInt(row.folderKey) === parseInt(folderKey)) ? "selected" : "";
            folderKeyOptions = folderKeyOptions + "<option value='" + row.folderKey + "' " + selected + ">" + row.folderName + "</option>";
        });
        let template = "<tr id='leaf-" + leafKey + "'>" +
            "<td>     " +
            "<label>" +
            "<input type='number' class='form-control' name='leafSeq[]' id='leafSeq-" + leafKey + "' value='" + leafSeq + "' maxlength='4' />" +
            "</label>" +
            "</td>" +
            "<td class='tdNormalAlign'>" +
            " <label>" +
            "   <select id='folderKey-" + leafKey + "' class='form-control'>";
        template += folderKeyOptions;
        template += "</select>" +
            "</label>" +
            "</td>" +
            "<td>     " +
            "<label>" +
            "<input type='text' class='form-control'  id='leafName-" + leafKey + "' value='" + leafName + "' />" +
            "</label>" +
            "</td>" +
            "<td>     " +
            "<label>" +
            "<input type='text' class='form-control' id='leafFilename-" + leafKey + "' value='" + leafFilename + "' />" +
            "</label>" +
            "</td>" +
            "<td>     " +
            "<label>" +
            "<input type='text' class='form-control' id='leafIcon-" + leafKey + "' value='" + leafIcon + "' />" +
            "</label>" +
            "</td>" +
            "<td style='text-align: center'><div class='btn-group'>" +
            "<Button type='button' class='btn btn-warning' onclick='updateRecord(" + leafKey + ")'>" +
            "<i class='fas fa-edit'></i> UPDATE" +
            "</Button>" +
            "&nbsp;" +
            "<Button type='button' class='btn btn-danger' onclick='deleteRecord(" + leafKey + ")'>" +
            "<i class='fas fa-trash'></i> DELETE" +
            "</Button>" +
            "</div></td>" +
            "</tr>" +
            "";
        return template;
    }
    function createRecord() {
        const $folderKey = $("#folderKey");
        const $leafName = $("#leafName");
        const $leafSeq = $("#leafSeq");
        const $leafFilename = $("#leafFilename");
        const $leafIcon = $("#leafIcon");
        if ($folderKey.val() > 0 &&
            $leafName.val().length > 0 &&
            $leafSeq.val() > 0) {
            $.ajax({
                type: 'POST',
                url: "api/menu/leaf",
                async: false,
                data: {
                    mode: 'create',
                    leafCheckKey: @navigationModel.LeafCheckKey,
                    folderKey: $folderKey.val(),
                    leafName: $leafName.val(),
                    leafFilename: $leafFilename.val(),
                    leafSeq: $leafSeq.val()
                }, 
                statusCode: {
                    500: function () {
                        Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                        accessDenied();
                    }
                },
                beforeSend: function () {
                    console.log("loading");
                }
            }).done(function (data) {
                if (data === void 0) {
                    location.href = "/";
                }
                let status = data.status;
                let code = data.code;
                if (status) {
                    const lastInsertKey = data.lastInsertKey;
                    $("#tableBody").prepend(template(lastInsertKey, $folderKey, $leafSeq.val(), $leafName.val(), $leafFilename.val(), $leafIcon.val()));
                    Swal.fire({
                        title: 'Success!',
                        text: '@SharedUtil.RecordCreated',
                        icon: 'success',
                        confirmButtonText: 'Cool'
                    });
                    $folderKey.val('');
                    $leafSeq.val('');
                    $leafName.val('');
                    $leafFilename.val('');
                    $leafIcon.val('');
                } else if (status === false) {
                    if (parseInt(code) === accessDeniedCode) {
                        accessDenied();
                    } else if (typeof (code) === 'string') {
                        callBackError();
                    } else {
                        location.href = "/";
                    }
                } else {
                    location.href = "/";
                }

            }).fail(function (xhr) {
                console.log(xhr.status)
                Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
            }).always(function () {
                console.log("always:complete");
            });
        } else {
            Swal.fire("System", "Please enter all field required .mate", "error");
        }
    }
    function readRecord() {
        // fake model initializer
        let row = { leafKey: "", folderKey: "", leafSeq: "", leafName: "", leafFilename: "", leafIcon: "" };
        $.ajax({
            type: "post",
            url: "api/menu/leaf",
            async: false,
            contentType: "application/x-www-form-urlencoded",
            data: {
                mode: "read",
                leafCheckKey: @navigationModel.LeafCheckKey
                }, statusCode: {
                500: function () {
                    Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                }
            }, beforeSend() {
                console.log("loading .. ");
            }
        }).done(function (data) {
            if (data === void 0) {
                location.href = "/";
            }
            let status = data.status;
            let code = data.code;
            if (status) {
                if (data.data === void 0) {
                    $("#tableBody").html("").html(emptyTemplate());
                } else {
                    if (data.data.length > 0) {
                        let templateStringBuilder = "";
                        for (let i = 0; i < data.data.length; i++) {
                            row = data.data[i];
                            templateStringBuilder += template(row.leafKey, row.folderKey, row.leafSeq, row.leafName, row.leafFilename, row.leafIcon);
                        }
                        $("#tableBody").html("").html(templateStringBuilder);
                    } else {
                        $("#tableBody").html("").html(emptyTemplate());
                    }
                }
            } else if (status === false) {
                if (parseInt(code) === accessDeniedCode) {
                    accessDenied();
                } else if (typeof (code) === 'string') {
                    callBackError();
                } else {
                    location.href = "/";
                }
            } else {
                location.href = "/";
            }

        }).fail(function (xhr) {
            console.log(xhr.status)
            Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
            accessDenied();
        }).always(function () {
            console.log("always:complete");
        });
    }

    function searchRecord() {
        // fake model initializer
        let row = { leafKey: "", folderKey: "", leafSeq: "", leafName: "", leafFilename: "", leafIcon: "" };
        $.ajax({
            type: "post",
            url: "api/menu/leaf",
            async: false,
            contentType: "application/x-www-form-urlencoded",
            data: {
                mode: "search",
                leafCheckKey: @navigationModel.LeafCheckKey,
                search: $("#search").val()
            }, 
            statusCode: {
                500: function () {
                    Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    accessDenied();
                }
            }, 
            beforeSend() {
                console.log("loading ..");
            }
        }).done(function (data) {
            if (data === void 0) {
                location.href = "/";
            }
            let status = data.status;
            let code = data.code;
            if (status) {
                if (data.data === void 0) {
                    $("#tableBody").html("").html(emptyTemplate());
                } else {
                    if (data.data.length > 0) {
                        let templateStringBuilder = "";
                        for (let i = 0; i < data.data.length; i++) {
                            row = data.data[i];
                            templateStringBuilder += template(row.leafKey, row.folderKey, row.leafSeq, row.leafName, row.leafFilename, row.leafIcon);
                        }
                        $("#tableBody").html("").html(templateStringBuilder);
                    } else {
                        $("#tableBody").html("").html(emptyTemplate());
                    }
                }
            } else if (status === false) {
                if (parseInt(code) === accessDeniedCode) {
                    accessDenied();
                } else if (typeof (code) === 'string') {
                    callBackError();
                } else {
                    location.href = "/";
                }

            } else {
                location.href = "/";
            }
        }).fail(function (xhr) {
            console.log(xhr.status)
            Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
            accessDenied();
        }).always(function () {
            console.log("always:complete");
        });
    }
    function updateRecord(leafKey) {
        $.ajax({
            type: 'POST',
            url: "api/menu/leaf",
            async: false,
            data: {
                mode: 'update',
                leafCheckKey: @navigationModel.LeafCheckKey,
                leafKey: leafKey,
                folderKey: $("#folderKey-" + leafKey).val(),
                leafName: $("#leafName-" + leafKey).val(),
                leafFilename: $("#leafFilename-" + leafKey).val(),
                leafSeq: $("#leafSeq-" + leafKey).val()
            }, 
            statusCode: {
                500: function () {
                    Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                    accessDenied()
                }
            },
            beforeSend: function () {
                console.log("loading");
            }
        }).done(function (data) {
            if (data === void 0) {
                location.href = "/";
            }
            let status = data.status;
            let code = data.code;
            if (status) {
                Swal.fire("System", "@SharedUtil.RecordUpdated", 'success')
            } else if (status === false) {
                if (parseInt(code) === accessDeniedCode) {
                    console.log("here problem")
                    accessDenied();
                } else if (typeof (code) === 'string') {
                    callBackError();
                } else {
                    location.href = "/";
                }

            } else {
                location.href = "/";
            }
        }).fail(function (xhr) {
            console.log(xhr.status)
            Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
            accessDenied();
        }).always(function () {
            console.log("always:complete");
        });
    }

    function deleteRecord(leafKey) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Yes, delete it!',
            cancelButtonText: 'No, cancel!',
            reverseButtons: true
        }).then((result) => {
            if (result.value) {

                $.ajax({
                    type: 'POST',
                    url: "api/menu/leaf",
                    async: false,
                    data: {
                        mode: 'delete',
                        leafCheckKey: @navigationModel.LeafCheckKey,
                        leafKey: leafKey
                    }, statusCode: {
                        500: function () {
                            Swal.fire("System Error", "@SharedUtil.UserErrorNotification", "error");
                            accessDenied();
                        }
                    },
                    beforeSend: function () {
                        console.log("loading");
                    }
                }).done(function (data) {
                    if (data === void 0) {
                        location.href = "/";
                    }
                    let status = data.status;
                    let code = data.code;
                    if (status) {
                        $("#leaf-" + leafKey).remove();
                        Swal.fire("System", "@SharedUtil.RecordDeleted", "success");
                    } else if (status === false) {
                        if (parseInt(code) === accessDeniedCode) {
                            accessDenied();
                        } else if (typeof (code) === 'string') {
                            callBackError();
                        } else {
                            location.href = "/";
                        }

                    } else {
                        location.href = "/";
                    }
                }).fail(function (xhr) {
                    console.log(xhr.status)
                    Swal.fire("System", "@SharedUtil.UserErrorNotification", "error");
                    accessDenied();
                }).always(function () {
                    console.log("always:complete");
                });
            } else if (result.dismiss === swal.DismissReason.cancel) {
                swal(
                    'Cancelled',
                    'Be careful before delete record',
                    'error'
                )
            }
        });

    }


</script>